Using the Gold predicate extraction. Using argument coreference resolution (without using all entities for coreference resolution). 
Using first argument match only for decision.


lexical_weight: 0.0 arg_weight: 0.0 score: [0.0, 0.4507105440752747, 0.3768371716898421, 0.2758492385883723]
lexical_weight: 0.0 arg_weight: 0.25 score: [0.0, 0.4507105440752747, 0.3768371716898421, 0.2758492385883723]
lexical_weight: 0.0 arg_weight: 0.5 score: [0.0, 0.4507105440752747, 0.3768371716898421, 0.2758492385883723]
lexical_weight: 0.0 arg_weight: 0.75 score: [0.2817942265972972, 0.5457881797747948, 0.4952315061328836, 0.44093797083499175]
lexical_weight: 0.0 arg_weight: 1.0 score: [0.2859363891005132, 0.5447582156350589, 0.4954107289954967, 0.44203511124368955]
lexical_weight: 0.25 arg_weight: 0.0 score: [0.0, 0.4507105440752747, 0.3768371716898421, 0.2758492385883723]
lexical_weight: 0.25 arg_weight: 0.25 score: [0.0, 0.4507105440752747, 0.3768371716898421, 0.2758492385883723]
lexical_weight: 0.25 arg_weight: 0.5 score: [0.25448432582967895, 0.5874864415041321, 0.5372526780395847, 0.4597411484577985]
lexical_weight: 0.25 arg_weight: 0.75 score: [0.31571812585897374, 0.5603155423206516, 0.5055457019848826, 0.4605264567215027]
lexical_weight: 0.25 arg_weight: 1.0 score: [0.3338162081569612, 0.5675793250444772, 0.5129992279136579, 0.4714649203716988]
lexical_weight: 0.5 arg_weight: 0.0 score: [0.0, 0.4507105440752747, 0.3768371716898421, 0.2758492385883723]
lexical_weight: 0.5 arg_weight: 0.25 score: [0.35105520153513864, 0.6263200753004867, 0.5819432432982204, 0.5197728400446153]
lexical_weight: 0.5 arg_weight: 0.5 score: [0.3470377000954974, 0.6233410358139077, 0.5784045010647619, 0.516261078991389]
lexical_weight: 0.5 arg_weight: 0.75 score: [0.34902040417525954, 0.5771058136079328, 0.5206396780785777, 0.48225529862059]
lexical_weight: 0.5 arg_weight: 1.0 score: [0.3451508883322547, 0.5753990074167655, 0.5199234078452221, 0.4801577678647474]
lexical_weight: 0.75 arg_weight: 0.0 score: [0.6081835154105351, 0.7343677145260468, 0.5581082725409358, 0.6335531674925059]
lexical_weight: 0.75 arg_weight: 0.25 score: [0.6178927678099728, 0.7349892585386419, 0.5596763596317409, 0.6375194619934519]
lexical_weight: 0.75 arg_weight: 0.5 score: [0.612387258000779, 0.7264048287682768, 0.5469853567523202, 0.6285924811737921]
lexical_weight: 0.75 arg_weight: 0.75 score: [0.5731682362396116, 0.6810738004187784, 0.49086961949959906, 0.5817038853859964]
lexical_weight: 0.75 arg_weight: 1.0 score: [0.573722747387976, 0.6723643723333023, 0.47970173662881077, 0.5752629521166963]
lexical_weight: 1.0 arg_weight: 0.0 score: [0.606781789007612, 0.7298816698355426, 0.5556439067185946, 0.6307691218539164]
lexical_weight: 1.0 arg_weight: 0.25 score: [0.6145511803513465, 0.7281757346793316, 0.5551802174891833, 0.6326357108399538]
lexical_weight: 1.0 arg_weight: 0.5 score: [0.617734026199548, 0.7273129116382983, 0.5508467639184532, 0.6319645672520998]
lexical_weight: 1.0 arg_weight: 0.75 score: [0.5953635637086607, 0.6896981754832195, 0.47679642613342593, 0.5872860551084355]
lexical_weight: 1.0 arg_weight: 1.0 score: [0.5966703075329106, 0.6811701546462623, 0.46003343433429855, 0.5792912988378238]

Using the Gold predicate extraction. Using argument coreference resolution (without using all entities for coreference resolution). 
Using 50% argument match for decision.

lexical_weight: 0.0 arg_weight: 0.0 score: [0.0, 0.45, 0.38, 0.28]
lexical_weight: 0.0 arg_weight: 0.25 score: [0.0, 0.45, 0.38, 0.28]
lexical_weight: 0.0 arg_weight: 0.5 score: [0.0, 0.45, 0.38, 0.28]
lexical_weight: 0.0 arg_weight: 0.75 score: [0.32, 0.5, 0.42, 0.41]
lexical_weight: 0.0 arg_weight: 1.0 score: [0.32, 0.51, 0.41, 0.41]
lexical_weight: 0.25 arg_weight: 0.0 score: [0.0, 0.45, 0.38, 0.28]
lexical_weight: 0.25 arg_weight: 0.25 score: [0.0, 0.45, 0.38, 0.28]
lexical_weight: 0.25 arg_weight: 0.5 score: [0.48, 0.67, 0.61, 0.59]
lexical_weight: 0.25 arg_weight: 0.75 score: [0.35, 0.53, 0.43, 0.44]
lexical_weight: 0.25 arg_weight: 1.0 score: [0.32, 0.5, 0.41, 0.41]
lexical_weight: 0.5 arg_weight: 0.0 score: [0.0, 0.45, 0.38, 0.28]
lexical_weight: 0.5 arg_weight: 0.25 score: [0.53, 0.72, 0.64, 0.63]
lexical_weight: 0.5 arg_weight: 0.5 score: [0.52, 0.7, 0.62, 0.61]
lexical_weight: 0.5 arg_weight: 0.75 score: [0.35, 0.53, 0.44, 0.44]
lexical_weight: 0.5 arg_weight: 1.0 score: [0.32, 0.5, 0.41, 0.41]
lexical_weight: 0.75 arg_weight: 0.0 score: [0.61, 0.73, 0.56, 0.63]
lexical_weight: 0.75 arg_weight: 0.25 score: [0.62, 0.73, 0.56, 0.64]
lexical_weight: 0.75 arg_weight: 0.5 score: [0.61, 0.73, 0.56, 0.63]
lexical_weight: 0.75 arg_weight: 0.75 score: [0.38, 0.54, 0.41, 0.44]
lexical_weight: 0.75 arg_weight: 1.0 score: [0.34, 0.5, 0.36, 0.4]
lexical_weight: 1.0 arg_weight: 0.0 score: [0.61, 0.73, 0.56, 0.63]
lexical_weight: 1.0 arg_weight: 0.25 score: [0.61, 0.73, 0.55, 0.63]
lexical_weight: 1.0 arg_weight: 0.5 score: [0.58, 0.71, 0.55, 0.61]
lexical_weight: 1.0 arg_weight: 0.75 score: [0.4, 0.55, 0.41, 0.45]
lexical_weight: 1.0 arg_weight: 1.0 score: [0.35, 0.5, 0.34, 0.4]


Using the Gold predicate extraction. Using predicted argument coreference resolution (Not Using all entities for coreference resolution). 

lex_vs_arg_ratio: 0.0 argument_match_ratio: 0.25 score: [0.33, 0.51, 0.4, 0.41]
lex_vs_arg_ratio: 0.0 argument_match_ratio: 0.5 score: [0.32, 0.51, 0.41, 0.41]
lex_vs_arg_ratio: 0.0 argument_match_ratio: 0.75 score: [0.29, 0.54, 0.58, 0.47]
lex_vs_arg_ratio: 0.0 argument_match_ratio: 1.0 score: [0.29, 0.54, 0.58, 0.47]
lex_vs_arg_ratio: 0.25 argument_match_ratio: 0.0 score: [0.21, 0.22, 0.02, 0.15]
lex_vs_arg_ratio: 0.25 argument_match_ratio: 0.25 score: [0.34, 0.52, 0.41, 0.42]
lex_vs_arg_ratio: 0.25 argument_match_ratio: 0.5 score: [0.35, 0.53, 0.43, 0.44]
lex_vs_arg_ratio: 0.25 argument_match_ratio: 0.75 score: [0.3, 0.56, 0.58, 0.48]
lex_vs_arg_ratio: 0.25 argument_match_ratio: 1.0 score: [0.3, 0.56, 0.58, 0.48]
lex_vs_arg_ratio: 0.5 argument_match_ratio: 0.0 score: [0.47, 0.66, 0.48, 0.54]
lex_vs_arg_ratio: 0.5 argument_match_ratio: 0.25 score: [0.53, 0.71, 0.62, 0.62]
lex_vs_arg_ratio: 0.5 argument_match_ratio: 0.5 score: [0.52, 0.7, 0.62, 0.61]
lex_vs_arg_ratio: 0.5 argument_match_ratio: 0.75 score: [0.39, 0.62, 0.59, 0.53]
lex_vs_arg_ratio: 0.5 argument_match_ratio: 1.0 score: [0.38, 0.62, 0.59, 0.53]
lex_vs_arg_ratio: 0.75 argument_match_ratio: 0.0 score: [0.61, 0.73, 0.54, 0.63]
lex_vs_arg_ratio: 0.75 argument_match_ratio: 0.25 score: [0.62, 0.73, 0.56, 0.64]
lex_vs_arg_ratio: 0.75 argument_match_ratio: 0.5 score: [0.62, 0.73, 0.56, 0.64]
lex_vs_arg_ratio: 0.75 argument_match_ratio: 0.75 score: [0.62, 0.73, 0.56, 0.64]
lex_vs_arg_ratio: 0.75 argument_match_ratio: 1.0 score: [0.62, 0.73, 0.56, 0.64]
lex_vs_arg_ratio: 1.0 argument_match_ratio: 0.0 score: [0.61, 0.73, 0.56, 0.63]
lex_vs_arg_ratio: 1.0 argument_match_ratio: 0.25 score: [0.61, 0.73, 0.56, 0.63]
lex_vs_arg_ratio: 1.0 argument_match_ratio: 0.5 score: [0.61, 0.73, 0.56, 0.63]
lex_vs_arg_ratio: 1.0 argument_match_ratio: 0.75 score: [0.61, 0.73, 0.56, 0.63]
lex_vs_arg_ratio: 1.0 argument_match_ratio: 1.0 score: [0.61, 0.73, 0.56, 0.63]


Using the Gold predicate extraction. Using preeicted argument coreference resolution (Using all entities for coreference resolution). 

lex_vs_arg_ratio: 0.0 argument_match_ratio: 0.5 score: [0.32, 0.5, 0.41, 0.41]
lex_vs_arg_ratio: 0.0 argument_match_ratio: 0.75 score: [0.31, 0.55, 0.53, 0.47]
lex_vs_arg_ratio: 0.0 argument_match_ratio: 1.0 score: [0.31, 0.55, 0.53, 0.46]
lex_vs_arg_ratio: 0.25 argument_match_ratio: 0.5 score: [0.33, 0.52, 0.41, 0.42]
lex_vs_arg_ratio: 0.25 argument_match_ratio: 0.75 score: [0.33, 0.56, 0.53, 0.48]
lex_vs_arg_ratio: 0.5 argument_match_ratio: 0.5 score: [0.53, 0.71, 0.63, 0.62]
lex_vs_arg_ratio: 0.5 argument_match_ratio: 0.75 score: [0.41, 0.64, 0.58, 0.54]
lex_vs_arg_ratio: 0.5 argument_match_ratio: 1.0 score: [0.41, 0.64, 0.58, 0.54]
lex_vs_arg_ratio: 0.75 argument_match_ratio: 0.5 score: [0.62, 0.73, 0.56, 0.64]
lex_vs_arg_ratio: 0.75 argument_match_ratio: 0.75 score: [0.62, 0.73, 0.56, 0.64]
lex_vs_arg_ratio: 0.75 argument_match_ratio: 1.0 score: [0.62, 0.73, 0.56, 0.64]
